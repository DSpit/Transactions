

import java.math.BigDecimal;
import java.util.Random;

/**
 * This class is an implementation of a transaction which deposits money 
 * into the account which is stored as it's member variable. This class
 * also provides a method ({@link #display}) which displays the transaction
 * details. 
 *
 * @author David Boivin (Spit)
 * @author Patrick Spensieri
 */
public class DepositTransaction extends AbsTransaction 
	implements MoneyTransactionInterface {
	
// Constants --------------------------------------------------------------- //
	
	public final float MIN_RANDOM_PERCENT = 0.25f;
	public final float MAX_RANDOM_PERCENT = 0.75f;
	public final float VALID_PERCENT = 0.50f;
	
// Members ----------------------------------------------------------------- //
	
	private BigDecimal mRandom;

// Constructors ------------------------------------------------------------ //
	
	/**
	 * Provides a usable constructor which implements 
	 * {@link AbsTransaction#AbsTransaction()} and initializes the deposit 
	 * amount to a random number generated by {@link #getRandomAmount()}
	 * 
	 * @see {@link AbsTransaction#AbsTransaction()}
	 */
	public DepositTransaction(){
		super();
		
		mRandom = this.getRandomAmount();
	}
	
	/**
	 * Provides a usable constructor which implements 
	 * {@link AbsTransaction#AbsTransaction(Account)} and initializes the deposit 
	 * amount to a random number generated by {@link #getRandomAmount()}
	 * 
	 * @param account The account on which to perform the transaction on.
	 * 
	 * @see {@link AbsTransaction#AbsTransaction(Account)}
	 */
	public DepositTransaction(Account account){
		super(account);
		
		mRandom = this.getRandomAmount();
	}

// Overridden Methods ------------------------------------------------------ //
	
	/**
	 * Method which displays the information held within the account member variable
	 * in a pretty, user friendly formatting. <br><br>
	 * 
	 * This method will display: 
	 * <ul>
	 * 	<li>Transaction type</li>
	 * 	<li>The Previous account balance</li>
	 * 	<li>The Deposit Amount</li>
	 * 	<li>The New (Current) Balance</li>
	 * 	<li>The Validation</li>
	 * 	<li>End of transaction message</li>
	 * </ul>
	 * 
	 * <b>IMPORTANT:</b> This method assumes that the transaction has been executed already.
	 * 
	 * @see AbsTransaction#display()
	 */
	@Override
	protected void display() {
		System.out.println("\tDeposit Transaction");						//transaction type
		System.out.println("\t\tOrigional Balance: " + mAccount.getPreviousBalance() + "$");	//original balance
		System.out.println("\t\tDeposit Amount: " + mRandom + "$");				//deposit amount
		System.out.println("\t\tCurrent Balance: " + mAccount.getBalance() + "$"); 		//current balance
		System.out.println("\t\t" + this.showValidation(mAccount.getPreviousBalance()));	//show the validation
		System.out.print("\t");									//end of transaction message formatting
		super.display();									//end of transaction message
	}
	
// Unimplemented methods --------------------------------------------------- //
	
	/**
	 * Method which generates a random number using the rule: <br>
	 * <code>
	 *	 MIN_RANDOM_PERCENT*accontBalance <= x <= MAX_RANDOM_PERCENT*accountBalance 
	 * </code>
	 * 
	 * @return A randomly generated number in BigDecimal form
	 * 
	 * @see MoneyTransactionInterface#getRandomAmount()
	 */
	@Override
	public BigDecimal getRandomAmount() {
		//figure out the max and min for the number generation
		int min = Math.round((int)(MIN_RANDOM_PERCENT * mAccount.getBalance().doubleValue() * 100));
		int max = Math.round((int)(MAX_RANDOM_PERCENT * mAccount.getBalance().doubleValue() * 100));
		
		//generate random number within constraints
		double random = ((new Random()).nextInt(max-min) + min)/100.0;
		
		//put generated number back to proper decimal point and return
		return (new BigDecimal(random)).setScale(2, BigDecimal.ROUND_HALF_EVEN);
	}
	
	/**
	 * Method which checks the validity of the randomly generated number. 
	 * The validity is defined by: <br>
	 * <code>
	 * 	randomDepositAmount <= accountBalance*VALID_PERCENT 
	 * </code>
	 * 
	 * @param validityCheckBalance The account balance used to check if the transaction is valid or not.
	 * 
	 * @return <b>true</b> if the random amount is valid and <b>false</b> if
	 * the random amount is invalid.
	 * 
	 * @see MoneyTransactionInterface#isValid(BigDecimal)
	 */
	@Override
	public boolean isValid(BigDecimal validationCheckBalance) {
		
		if(mRandom.doubleValue() <= (validationCheckBalance.doubleValue() * VALID_PERCENT)){
			return true;
		}
		
		return false;
		
	}
	
	/**
	 * Method which returns a string which explains why the randomly generated number is
	 * valid or not.
	 * 
	 * @param validityCheckBalance The account balance used to check if the transaction is valid or not.
	 * 
	 * @return A string indicating why the random deposit amount stored within this class
	 *  instance is valid or not. 
	 *  
	 *  @see MoneyTransactionInterface#showValidation(bigDecimal)
	 */
	@Override
	public String showValidation(BigDecimal validityCheckBalance) {
		
		if(this.isValid(validityCheckBalance)){
			return "Transaction is valid because " + mRandom + "$ <= " + 
					(new BigDecimal(validityCheckBalance.doubleValue() * VALID_PERCENT))
					.setScale(2, BigDecimal.ROUND_HALF_EVEN) + "$";	//the little math at the end is to make the validity amount look pretty
			
		}
		
		return "Transaction is invalid because " + mRandom + "$ > " + 
				(new BigDecimal(validityCheckBalance.doubleValue() * VALID_PERCENT))
				.setScale(2, BigDecimal.ROUND_HALF_EVEN) + "$";		//same as before
			
	}
	
	/**
	 * Method which deposits the random amount stored within this class instance if and only
	 * if the amount is considered valid.
	 * 
	 * @see AbsTransaction#transaction()
	 */
	@Override
	public void transaction() {
		
		//figure out what the new balance is based on the validity of the randomly generated deposit
		BigDecimal newBalance = (this.isValid(mAccount.getBalance())) ? mAccount.getBalance().add(mRandom) : mAccount.getBalance();
		
		mAccount.setBalance(newBalance);
		
		this.display();
	}
	
	
}
